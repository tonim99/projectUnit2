{"version":3,"sources":["Header.js","Form.js","WordInfo.js","App.js","api/api.js","serviceWorker.js","index.js"],"names":["Header","React","createElement","className","Link","to","Form","_ref","setInput","setWord","input","onSubmit","e","preventDefault","error","message","type","placeholder","value","onChange","target","WordInfo","props","word","useState","wordData","map","wordInfo","index","Fragment","key","onClick","meta","id","fl","shortdef","App","setWordData","setError","getWord","useCallback","undefined","fetch","concat","process","then","async","res","ok","errorData","json","console","log","Error","fetchWord","data","catch","err","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","Router","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oPAaeA,MAVDA,IAEXC,IAAAC,cAAA,OAAKC,UAAU,UACdF,IAAAC,cAACE,IAAI,CAACC,GAAG,KACRJ,IAAAC,cAAA,MAAIC,UAAU,SAAQ,mBCsBZG,MA5BHC,IAAgC,IAA/B,SAACC,EAAQ,QAAEC,EAAO,MAAEC,GAAMH,EAanC,OACFN,IAAAC,cAAA,QAAMS,SAZgBC,IACpB,IACFA,EAAEC,iBACFJ,EAAQC,GACR,MAAMI,GACN,OAAOb,IAAAC,cAAA,WAAMY,EAAMC,SACnB,QACAP,EAAS,OAMRP,IAAAC,cAAA,SACCC,UAAU,OACVa,KAAK,OACLC,YAAY,YACZC,MAAOR,EACPS,SAAWP,GAAMJ,EAASI,EAAEQ,OAAOF,SAEpCjB,IAAAC,cAAA,SAAOC,UAAU,SAASa,KAAK,SAASE,MAAM,mBCQlCG,MA9BGC,IACd,MAAOC,EAAMd,GAAWe,qBAExB,OACIvB,IAAAC,cAAA,OAAKC,UAAW,YACZF,IAAAC,cAAA,UACKoB,EAAMG,UACHH,EAAMG,SAASC,IAAI,CAACC,EAAUC,IAE1B3B,IAAAC,cAACD,IAAM4B,SAAQ,CAACC,IAAKF,GACjB3B,IAAAC,cAAA,WACID,IAAAC,cAAA,UACID,IAAAC,cAAA,OAAK6B,QAASA,IAAMtB,EAAQkB,EAASK,KAAKC,GAAGL,KACxCD,EAASK,KAAKC,GACdN,EAASO,IACNjC,IAAAC,cAAA,YAAM,KAAGyB,EAASO,GAAG,KACjCjC,IAAAC,cAAA,QAAMC,UAAU,cACxBF,IAAAC,cAAA,SAAIyB,EAASQ,mBC0BtBC,MArCf,WAEC,MAAOX,EAAUY,GAAeb,mBAAS,KAClCD,EAAMd,GAAWe,sBACjBd,EAAOF,GAAYgB,mBAAS,KAC5BV,EAAOwB,GAAYd,qBAElBe,EAAUC,sBAAY,UAEjBC,IAATlB,GCdqBA,IAC1BmB,MAAM,mEAADC,OAAoEpB,EAAI,SAAAoB,OAH9DC,yCAIVC,KAAKC,UACF,IAAIC,EAAIC,GAAI,CACR,MAAMC,QAAkBF,EAAIG,OAE5B,MADAC,QAAQC,IAAIH,GACN,IAAII,MACNJ,EAAUlC,QAAUkC,EAAUlC,QAC9B,mCAGR,OAAOgC,EAAIG,SDIhBI,CAAU/B,GACRsB,KAAMU,IACNlB,EAAYkB,KAEZC,MAAOC,IACPnB,EAASmB,EAAI1C,YAGd,CAACQ,IAKJ,OAHAmC,oBAAU,KACTnB,KACE,CAACA,IAEHtC,IAAAC,cAAA,OAAKC,UAAU,OACdF,IAAAC,cAACF,EAAM,MACPC,IAAAC,cAACI,EAAI,CACJI,MAAOA,EACPF,SAAUA,EACVC,QAASA,IAEVR,IAAAC,cAACmB,EAAQ,CAACI,SAAUA,EAAUF,KAAMA,EAAMT,MAAOA,IAChDA,GAASb,IAAAC,cAAA,WAAMY,KE3BC6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACPhE,IAAAC,cAACgE,IAAM,KACLjE,IAAAC,cAACD,IAAMkE,WAAU,KACflE,IAAAC,cAACkC,EAAG,QAIRgC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,KAAK4B,IACJA,EAAaC,eAEdlB,MAAM1C,IACLqC,QAAQrC,MAAMA,EAAMC,a","file":"static/js/main.6df50e0a.chunk.js","sourcesContent":["import React from \"react\"\nimport {Link} from \"react-router-dom\"\n\nconst Header =()=> {\n    return (\n\t\t\t<nav className='header'>\n\t\t\t\t<Link to='/'>\n\t\t\t\t\t<h1 className='title'>My Dictionary</h1>\n\t\t\t\t</Link>\n\t\t\t</nav>\n\t\t);\n}\n\nexport default Header\n","import React from 'react'\nconst Form =({setInput, setWord, input})=> {\n\n  const handleSubmit = (e) => {\n    try{\n\t\te.preventDefault()\n\t\tsetWord(input)\n\t}catch(error) {\n\t\treturn <div>{error.message}</div>\n\t}finally {\n\t\tsetInput('')\n\t}\n  }\n  \n    return (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input\n\t\t\t\tclassName='text'\n\t\t\t\ttype='text'\n\t\t\t\tplaceholder='Your Word'\n\t\t\t\tvalue={input}\n\t\t\t\tonChange={(e) => setInput(e.target.value)}\n\t\t\t/>\n\t\t\t<input className='button' type='submit' value='Find My Word' />\n\t\t</form>\n\t\t\n\t);\n}\n\nexport default Form","import React, { useState } from \"react\"\nconst WordInfo = (props) => {\n    const [word, setWord] = useState()\n    \n    return (\n        <div className= 'wordList'>\n            <ol>\n                {props.wordData &&\n                    props.wordData.map((wordInfo, index) => {\n                        return (\n                        <React.Fragment key={index}>\n                            <div>\n                                <li>\n                                    <div onClick={() => setWord(wordInfo.meta.id[index])}>\n                                        {wordInfo.meta.id}\n                                        {wordInfo.fl &&\n                                            <span> ({wordInfo.fl})</span>}\n                                <span className='definition'>\n\t\t\t\t                    <p>{wordInfo.shortdef}</p>\n\t\t\t                    </span>\n                                    </div>\n                                </li>\n                            </div>\n                        </React.Fragment> \n                    );\n                })}\n            </ol>\n        </div>\n        )\n}\n\nexport default WordInfo","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport Header from \"./Header\"\nimport Form from \"./Form\"\nimport WordInfo from './WordInfo'\nimport { fetchWord } from './api/api';\n\nfunction App() {\n\t\n\tconst [wordData, setWordData] = useState([])\n\tconst [word, setWord] = useState()\n\tconst [input, setInput] = useState('')\n\tconst [error, setError] = useState();\n\n  \tconst getWord = useCallback(() => {\n\t\t\n\t\tif(word !== undefined){\n\t\t\tfetchWord(word)\n\t\t\t\t.then((data) => {\n\t\t\t\t\tsetWordData(data)\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tsetError(err.message)\n\t\t\t\t})\n\t\t}\t\t\n\t}, [word])\n\t\n\tuseEffect(() => {\n\t\tgetWord()\n\t}, [getWord])\n\treturn (\n\t\t<div className='app'>\n\t\t\t<Header />\n\t\t\t<Form \n\t\t\t\tinput={input}\n\t\t\t\tsetInput={setInput} \n\t\t\t\tsetWord={setWord}\n\t\t\t/>\n\t\t\t<WordInfo wordData={wordData} word={word} error={error}/>\n\t\t\t{error && <div>{error}</div>}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const ApiKey = process.env.REACT_APP_API_KEY;\n\nexport const fetchWord = (word) => \nfetch(`https://www.dictionaryapi.com/api/v3/references/collegiate/json/${word}?key=${ApiKey}`)\n    .then(async (res) => {\n        if(!res.ok) {\n            const errorData = await res.json()\n            console.log(errorData)\n            throw new Error(\n                errorData.message ? errorData.message :\n                'Invalid word. Please try again.'\n            )\n        }\n        return res.json()\n    }\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nReactDOM.render(\n  <Router>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Router>,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}